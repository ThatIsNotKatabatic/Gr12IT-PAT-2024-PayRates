unit OwnerView;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, StdCtrls, ExtCtrls, ComCtrls, pngimage, Owner, ServiceClass, Grids,
  DBGrids, mainDB, MakePayment, Globals;

type
  TfrmOwnerView = class(TForm)
    pnlHeading: TPanel;
    btnMakePay: TButton;
    grpMonthlyDue: TGroupBox;
    lblTitle: TLabel;
    pnlWater: TPanel;
    pnlElectricity: TPanel;
    pnlRefuse: TPanel;
    Image1: TImage;
    Image2: TImage;
    Image3: TImage;
    lblOptions: TLabel;
    btnPaymentHistory: TButton;
    imgLine: TImage;
    imgLine2: TImage;
    btnViewTotalDue: TButton;
    btnViewMonthlyInstallments: TButton;
    dbgrdPaymenHistory: TDBGrid;
    lblTotal: TLabel;
    lblBreakdown: TLabel;
    grpStillToPay: TGroupBox;
    img1: TImage;
    img2: TImage;
    img3: TImage;
    lblTotal1: TLabel;
    lblBreakdown1: TLabel;
    pnlWater1: TPanel;
    pnlElectricity1: TPanel;
    pnlRefuse1: TPanel;
    procedure btnMakePayClick(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure btnPaymentHistoryClick(Sender: TObject);
    procedure btnViewMonthlyInstallmentsClick(Sender: TObject);
    procedure btnViewTotalDueClick(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
    procedure createOwner(OwnerID: string);
  end;

var
  frmOwnerView: TfrmOwnerView;
  objOwner: TOwner;
  objGlobals: TGlobals;

implementation

{$R *.dfm}
{ TfrmOwnerView }

procedure TfrmOwnerView.btnMakePayClick(Sender: TObject);
begin
  // Show the payment form and set the current owner for it
  frmMakePayment.Show;
  frmMakePayment.setOwner(objOwner.getOwnerID);
end;

procedure TfrmOwnerView.btnPaymentHistoryClick(Sender: TObject);
begin
  // Update the UI to display payment history
  lblTitle.Caption := 'Displaying Payment History'; // Set the title for the payment history
  dbgrdPaymenHistory.Show; // Show the payment history grid
  grpMonthlyDue.Hide; // Hide the monthly due group
  grpStillToPay.Hide; // Hide the still to pay group
end;

procedure TfrmOwnerView.btnViewMonthlyInstallmentsClick(Sender: TObject);
begin
  // Update the UI to display monthly installment rates
  lblTitle.Caption := 'Displaying the monthly installment rates'; // Set the title for monthly installments
  grpMonthlyDue.Show; // Show the monthly due group
  grpStillToPay.Hide; // Hide the still to pay group
  dbgrdPaymenHistory.Hide; // Hide the payment history grid
end;

procedure TfrmOwnerView.btnViewTotalDueClick(Sender: TObject);
begin
  // Update the UI to display the total amount still due
  lblTitle.Caption := 'Displaying what still needs to be paid'; // Set the title for total due
  grpMonthlyDue.Hide; // Hide the monthly due group
  grpStillToPay.Show; // Show the still to pay group
  dbgrdPaymenHistory.Hide; // Hide the payment history grid
end;

procedure TfrmOwnerView.createOwner(OwnerID: string);
var
  lablle : TLabel; // Temporary label for displaying property addresses and bills
  panle : TPanel; // Temporary panel for displaying bill amounts
  i, j : Integer; // Loop counters
  adresses : TBuildingsArray; // Array of property addresses and bills
begin
  // Initialize the owner object with the given OwnerID
  objOwner := TOwner.Create(OwnerID);

  // Update the UI with the owner's utility bills
  pnlWater.Caption := FloatToStr(objOwner.getWaterBill);
  pnlRefuse.Caption := FloatToStr(objOwner.getRefuseBill);
  pnlElectricity.Caption := FloatToStr(objOwner.getElecBill);

  // Set SQL query to retrieve payment history for the owner
  objGlobals.setSQL('SELECT PropertyAddress, Type, PayedDate, AmountPaid FROM Services WHERE OwnerID = "' + objOwner.getOwnerID + '" ORDER BY PayedDate');

  // Hide the groups that are not relevant initially
  grpStillToPay.Hide;
  grpMonthlyDue.Hide;

  // Get the list of property addresses for the owner
  adresses := objOwner.getPropertyAddressList;

  // Loop through each property address and create labels and panels for monthly due bills
  for i := 0 to High(adresses) do
  begin
    // Create a label for the property address
    lablle := TLabel.Create(grpMonthlyDue);
    lablle.Parent := grpMonthlyDue;
    lablle.Font := lblTotal.Font;
    lablle.Top := lblBreakdown.Top + 50 + (i * 80);
    lablle.Left := lblTotal.Left;
    lablle.Caption := adresses[i].Address + ': ';

    // Create panels for each type of bill (assuming 4 types of bills)
    for j := 0 to 3 do
    begin
      panle := TPanel.Create(grpMonthlyDue);
      panle.Parent := grpMonthlyDue;
      panle.Font := pnlWater.Font;
      panle.Top := lblBreakdown.Top + 50 + (i * 80);
      panle.Left := pnlWater.Left + (j * 123);
      panle.Width := pnlWater.Width;
      panle.Caption := 'R' + FloatToStr(adresses[i].Bills[j]); // Display the bill amount
    end;
  end;

  // Generate the 'still to pay' group box with the remaining amounts
  for i := 0 to High(adresses) do
  begin
    // Create a label for the property address
    lablle := TLabel.Create(grpStillToPay);
    lablle.Parent := grpStillToPay;
    lablle.Font := lblTotal.Font;
    lablle.Top := lblBreakdown.Top + 50 + (i * 80);
    lablle.Left := lblTotal.Left;
    lablle.Caption := adresses[i].Address + ': ';

    // Create panels for the remaining amounts of each bill (total - paid)
    for j := 0 to 3 do
    begin
      panle := TPanel.Create(grpStillToPay);
      panle.Parent := grpStillToPay;
      panle.Font := pnlWater.Font;
      panle.Top := lblBreakdown.Top + 50 + (i * 80);
      panle.Left := pnlWater.Left + (j * 123);
      panle.Width := pnlWater.Width;
      panle.Caption := 'R' + FloatToStr(adresses[i].Bills[j] - adresses[i].Paid[j]); // Display remaining amount
    end;
  end;
end;

procedure TfrmOwnerView.FormCreate(Sender: TObject);
begin
  // Initialize global variables when the form is created
  objGlobals := TGlobals.Create;

end;

end.
