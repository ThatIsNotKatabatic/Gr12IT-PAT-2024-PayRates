unit Login;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, ExtCtrls, StdCtrls, ShellAPI, Globals, Signup, MainDB,
  EmployeeView, OwnerView, ADODB, Validation_U;

type
  TfrmLogin = class(TForm)
    lblLogin: TLabel;
    lblEnterLoginName: TLabel;
    lblEnterLoginPassword: TLabel;
    edtLoginEmail: TEdit;
    edtLoginPassword: TEdit;
    btnLogin: TButton;
    pnlHeading: TPanel;
    btnSignUp: TButton;
    Label1: TLabel;
    chkRememberMe: TCheckBox;
    procedure FormCreate(Sender: TObject);
    procedure btnSignUpClick(Sender: TObject);
    procedure btnLoginClick(Sender: TObject);
    procedure Login;
    function checkPassword(table: TADOTable): boolean;
    procedure SaveToTxtFile;
    procedure LoadFromTxtFile;
    procedure ClearTxtFile;
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  frmLogin: TfrmLogin;
  objGlobals: TGlobals;
  objValidation : DataValidation;

implementation

{$R *.dfm}

procedure TfrmLogin.btnLoginClick(Sender: TObject);
begin
  // Trigger the login process when the login button is clicked
  Login;

  // validate the email

end;

procedure TfrmLogin.Login;
begin
  // Handle the login process
  if not chkRememberMe.Checked then
    ClearTxtFile; // Clear saved login details if "Remember Me" is not checked
  if objValidation.isValidEmail(edtLoginEmail.Text) = false then
  begin
    ShowMessage('You have not entered a valid email');
  end;

  with dbmMainDB do
  begin
    // Search through the employee table for a matching email
    tblEmployee.First; // Start at the first record
    while not tblEmployee.EOF do
    begin
      if tblEmployee['EmailAddress'] = edtLoginEmail.Text then
      begin
        if checkPassword(tblEmployee) then
        begin
          // Successful login for an employee
          frmEmployeeView.Show; // Show the employee view form
          if chkRememberMe.Checked then
            SaveToTxtFile; // Save login details if "Remember Me" is checked
          Hide; // Hide the login form
          Exit; // Exit the procedure
        end
        else
        begin
          ShowMessage('Password wrong'); // Inform user of incorrect password
          Exit; // Exit the procedure
        end;
      end;
      tblEmployee.Next; // Move to the next record
    end;

    // If not found in employee table, search the owner table
    tblOwners.First; // Start at the first record
    while not tblOwners.EOF do
    begin
      if tblOwners['EmailAddress'] = edtLoginEmail.Text then
      begin
        if checkPassword(tblOwners) then
        begin
          // Successful login for an owner
          frmOwnerView.Show; // Show the owner view form
          frmOwnerView.createOwner(tblOwners['OwnerID']); // Initialize owner details
          if chkRememberMe.Checked then
            SaveToTxtFile; // Save login details if "Remember Me" is checked
          Hide; // Hide the login form
          Exit; // Exit the procedure
        end
        else
        begin
          ShowMessage('Password wrong'); // Inform user of incorrect password
          Exit; // Exit the procedure
        end;
      end;
      tblOwners.Next; // Move to the next record
    end;

    // Inform user if the email address was not found in either table
    ShowMessage('Email address not found');
  end;
end;

procedure TfrmLogin.SaveToTxtFile;
var
  txt_file: TextFile; // File variable for saving login details
begin
  AssignFile(txt_file, 'LoginInData.txt'); // Associate the file variable with the file name
  // Save current user details to the text file
  Rewrite(txt_file); // Create or overwrite the file
  Writeln(txt_file, edtLoginEmail.Text + '#' + edtLoginPassword.Text); // Write the email and password
  CloseFile(txt_file); // Close the file
end;

procedure TfrmLogin.ClearTxtFile;
var
  txt_file: TextFile; // File variable for clearing the text file
begin
  AssignFile(txt_file, 'LoginInData.txt'); // Associate the file variable with the file name
  // Clear the contents of the text file
  Rewrite(txt_file); // Create or overwrite the file
  CloseFile(txt_file); // Close the file
end;

procedure TfrmLogin.LoadFromTxtFile;
var
  txt_file: TextFile; // File variable for reading login details
  line: string; // Variable to hold the line read from the file
  separatorPos: Integer; // Position of the separator character in the line
begin
  if not FileExists('LoginInData.txt') then
    Exit; // Exit if the file does not exist

  AssignFile(txt_file, 'LoginInData.txt'); // Associate the file variable with the file name
  Reset(txt_file); // Open the file for reading

  // Read the user details from the text file
  Readln(txt_file, line); // Read a line from the file

  // Find the position of the separator (assuming it's a '#')
  separatorPos := Pos('#', line);

  // Extract and assign values to the edit boxes
  if separatorPos > 0 then
  begin
    edtLoginEmail.Text := Copy(line, 1, separatorPos - 1); // Extract email
    edtLoginPassword.Text := Copy(line, separatorPos + 1, Length(line) - separatorPos); // Extract password
  end;

  CloseFile(txt_file); // Close the file
  chkRememberMe.Checked := True; // Set "Remember Me" checkbox to checked
end;

function TfrmLogin.checkPassword(table: TAdoTable): Boolean;
begin
  // Check if the provided password matches the stored password
  if table['Password'] = edtLoginPassword.Text then
  begin
    Result := True; // Password is correct
    Exit;
  end
  else
  begin
    Result := False; // Password is incorrect
    Exit;
  end;
end;

procedure TfrmLogin.btnSignUpClick(Sender: TObject);
begin
  // Open the sign-up form when the sign-up button is clicked
  frmSignup.Show;
end;

procedure TfrmLogin.FormCreate(Sender: TObject);
begin
  // Initialize global settings and load saved login details
  objGlobals := TGlobals.Create; // Create a new global settings object
  LoadFromTxtFile; // Load saved login details if they exist
  objValidation := DataValidation.create;
end;


end.
