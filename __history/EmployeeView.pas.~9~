unit EmployeeView;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, ExtCtrls, StdCtrls, ComCtrls, Grids, DBGrids, mainDB, Globals;

type
  TfrmEmployeeView = class(TForm)
    edtSearchBar: TEdit;
    btnSearch: TButton;
    pnlHeading: TPanel;
    dbgOut: TDBGrid;
    cmbSearchType: TComboBox;
    cmbTableSelect: TComboBox;
    procedure btnSearchClick(Sender: TObject);
    procedure cmbTableSelectChange(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure edtSearchBarChange(Sender: TObject);
    procedure dbgOutCellClick(Column: TColumn);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  frmEmployeeView: TfrmEmployeeView;
  arrTypeOptions: array [0 .. 3, 0 .. 6] of string;

implementation

{$R *.dfm}

// Procedure for handling the click event of the search button
procedure TfrmEmployeeView.btnSearchClick(Sender: TObject);
var
  search_type, table: string;  // Variables to store the search type and table name
  objGlobals: TGlobals;        // Object used to interact with global settings or SQL queries
begin
  // Check if a search type has been selected
  if cmbSearchType.ItemIndex = -1 then
  begin
    ShowMessage('please select a search type');  // Show a message if no search type is selected
    Exit;  // Exit the procedure if no search type is selected
  end;

  // Check if a table has been selected
  if cmbTableSelect.ItemIndex = -1 then
  begin
    ShowMessage('please select a table to search through');  // Show a message if no table is selected
    Exit;  // Exit the procedure if no table is selected
  end;

  // Retrieve the selected search type and table
  search_type := cmbSearchType.Text;
  table := cmbTableSelect.Text;

  // Create a new instance of the TGlobals object
  objGlobals := TGlobals.create;

  // Set the SQL query to search in the selected table based on the selected search type
  objGlobals.setSQL('SELECT * from ' + table + ' WHERE ' + search_type +
      ' LIKE "%' + edtSearchBar.Text + '%"');
end;

// Procedure for handling changes in the table selection combo box
procedure TfrmEmployeeView.cmbTableSelectChange(Sender: TObject);
var
  i: Integer;  // Loop index
begin
  // Clear the items in the search type combo box
  cmbSearchType.Items.Clear;
  cmbSearchType.Text := 'Select a Type';

  // Populate the search type combo box based on the selected table
  for i := 0 to 4 do
  begin
    cmbSearchType.Items.Add(arrTypeOptions[cmbTableSelect.ItemIndex, i])
  end;
end;

procedure TfrmEmployeeView.dbgOutCellClick(Column: TColumn);
begin
   ShowMessage(Column.DisplayName);
case cmbTableSelect.Text[1] of
  'S':  dbmMainDB.UserQuery[Column.DisplayName] := InputBox('Edit', 'Edit ' + Column.DisplayName, '')
  'B' : ShowMessage('This is a building');
  'O' : ShowMessage('This is a owner');
  'E' : ShowMessage('This is an employee')
end;

end;

//Procedure for handling changes in the search bar text
procedure TfrmEmployeeView.edtSearchBarChange(Sender: TObject);
begin
  // Check if a search type and table have been selected
  if cmbSearchType.ItemIndex = -1 then
    Exit;  // Exit if no search type is selected

  if cmbTableSelect.ItemIndex = -1 then
    Exit;  // Exit if no table is selected

  // Trigger the search button click event to perform the search
  btnSearchClick(Self);
end;

// Procedure for initializing the form
procedure TfrmEmployeeView.FormCreate(Sender: TObject);
begin
  // Initialize the array of search type options for each table
  arrTypeOptions[0, 0] := 'Address';
  arrTypeOptions[0, 1] := 'Owner';

  arrTypeOptions[1, 0] := 'EmployeeID';
  arrTypeOptions[1, 1] := 'EmailAddress';
  arrTypeOptions[1, 2] := 'FirstName';
  arrTypeOptions[1, 3] := 'LastName';

  arrTypeOptions[2, 0] := 'OwnerID';
  arrTypeOptions[2, 1] := 'EmailAddress';
  arrTypeOptions[2, 2] := 'FirstName';
  arrTypeOptions[2, 3] := 'LastName';
  arrTypeOptions[2, 4] := 'PhoneNumber';

  arrTypeOptions[3, 0] := 'EntryID';
  arrTypeOptions[3, 1] := 'OwnerID';
  arrTypeOptions[3, 2] := 'PropertyAddress';
  arrTypeOptions[3, 3] := 'Type';
end;

end.
